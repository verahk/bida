% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bida_bdeu.R
\name{bida_bdeu}
\alias{bida_bdeu}
\alias{aperm.bida_bdeu}
\alias{posterior_mean.bida_bdeu}
\alias{posterior_sample.bida_bdeu}
\alias{backdoor_mean.bida_bdeu}
\alias{backdoor_sample.bida_bdeu}
\alias{optimize_bdeu}
\alias{update_bdeu}
\alias{score_bdeu}
\title{Class: \code{bida_bdeu}}
\usage{
bida_bdeu(data, j, parentnodes, ess, nlev, partition = NULL)

\method{aperm}{bida_bdeu}(obj, perm)

\method{posterior_mean}{bida_bdeu}(obj, reduced = TRUE)

\method{posterior_sample}{bida_bdeu}(obj, n, reduced = TRUE)

\method{backdoor_mean}{bida_bdeu}(obj, nlevx)

\method{backdoor_sample}{bida_bdeu}(obj, n, nlevx, digits = 16)

optimize_bdeu(obj, method, levels = NULL, ...)

update_bdeu(obj, parent_config = NULL)

score_bdeu(obj)
}
\arguments{
\item{data}{a matrix with categorical data}

\item{j}{(integer) column position of outcome node}

\item{parentnodes}{column position(s) of parent node(s)}

\item{ess}{(integer) imaginary sample size}

\item{nlev}{(integer vector) cardinality of each variable}

\item{partition}{a list with partition over the joint outcomes of \code{parentnodes}.}

\item{reduced}{(bolean) if TRUE (default), the reduced CPT is returned.}

\item{nlevx}{(integer) cardinality of cause variable, for replicating vectors
with marginal probabilities for each intervention level.}

\item{method}{name of optimization procedure, see \code{optimize_partition}.}
}
\value{
An object of class \code{bida_bdeu} is a list that contains:
\itemize{
\item \code{counts} an array with counts for each joint outcome.
\item \code{partition} a list representing a partition over the parent outcomes.
\item \code{ess} the imaginary sample size.
}

\itemize{
\item \code{posterior_sample.bida_bdeu} returns an array of dimensions \code{c(dim(x), n)},
a \code{n} sized sample of CPTs drawn from the posterior distribution.
}
}
\description{
Represent a distribution over a conditional probability table (CPT)
}
\details{
The \code{bida_bdeu} class represent a (posterior) BDeu distribution over the
parameters of a conditional probability table (CPT), i.e. a distribution over
the distributions \code{P(X_j|Pa(X_k))}.

Methods...
\itemize{
\item \code{get_dim}: the dimension of the CPT, i.e. \code{nlev[c(j, parentnodes)]}.
\item \code{posterior_mean}: returns a CPT with the posteriorior mean values.
For \code{reduced = TRUE} or \code{is.null(obj$partition)}, the mean values are
stored in an array with \code{nlev[c(j, parentnodes)]} dimensions. Otherwise,
an \code{r-by-length(obj$partntion)} matrix.
\item \code{posterior_sample} returns an sample of CPTs.
\item \code{backdoor_mean}
\item \code{backdoor_sample}
}

\itemize{
\item \code{update_bdeu}: updates BDeu-hyper parameters.
If \code{is.null(obj$partition)}, returns a full (non-sparse) array with the same
dimensions as \code{obj$counts}. Otherwise a \code{r-by-nparts} matrix, where \code{r} is
the cardinality of the outcome and \code{nparts} the size of the partition of the
parent space.
}

\itemize{
\item \code{score_bdeu} computes the Bayesian score of the CPT
}
}
\examples{

nlev <- 2:4
lev  <- lapply(nlev-1, seq.int, from = 0)
data <- expand_grid_fast(lev)

j <- 1
parentnodes <- 2:length(nlev)
bdeu <- bida_bdeu(data, j, parentnodes, ess = 1, nlev)

# optimize partition of parent space
opt <- optimize_bdeu(bdeu, method = "tree", regular = T)
opt$partition
bdeu_part <- replace(bdeu, "partition", list(opt$partition))

# compute score
score_bdeu(bdeu)
score_bdeu(bdeu_part)

# update hyperparams
update_bdeu(bdeu)
update_bdeu(bdeu_part)

# permute parent dimension
perm <- c(1, 3, 2)
bdeu_perm <- aperm(bdeu_part, perm)
stopifnot(all.equal(as.array(bdeu_perm$counts), array(1, nlev[perm])))
bdeu_perm

# posterior mean
posterior_mean(bdeu)
posterior_mean(bdeu_part, reduced = T)  # means of reduced CPT
posterior_mean(bdeu_part, reduced = F)  # means of full CPT

# with local tree-structure defined as string
opt <- optimize_partition_from_data(data, j, parentnodes, ess = 1, nlev = nlev, method = "tree")
bdeu$partition <- opt
}
