% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bida_sparse_array.R, R/generics.R
\name{bida_sparse_array}
\alias{bida_sparse_array}
\alias{as.bida_sparse_array.array}
\alias{as.bida_sparse_array.bida_sparse_array}
\alias{dim.bida_sparse_array}
\alias{dim<-.bida_sparse_array}
\alias{dimnames.bida_sparse_array}
\alias{dimnames<-.bida_sparse_array}
\alias{as.array.bida_sparse_array}
\alias{rep.bida_sparse_array}
\alias{aperm.bida_sparse_array}
\alias{sum.bida_sparse_array}
\alias{+.bida_sparse_array}
\alias{*.bida_sparse_array}
\alias{-.bida_sparse_array}
\alias{/.bida_sparse_array}
\alias{rowSums.bida_sparse_array}
\alias{colSums.bida_sparse_array}
\alias{as.bida_sparse_array}
\title{class: cida sparse array}
\usage{
bida_sparse_array(value, index, dim, dimnames = NULL, default = 0)

\method{as.bida_sparse_array}{array}(arr, default = 0)

\method{as.bida_sparse_array}{bida_sparse_array}(x)

\method{dim}{bida_sparse_array}(x)

\method{dim}{bida_sparse_array}(x) <- value

\method{dimnames}{bida_sparse_array}(x)

\method{dimnames}{bida_sparse_array}(x) <- value

\method{as.array}{bida_sparse_array}(x)

\method{rep}{bida_sparse_array}(x, times = 1, each = 1)

\method{aperm}{bida_sparse_array}(x, perm)

\method{sum}{bida_sparse_array}(x, ...)

\method{+}{bida_sparse_array}(x, y)

\method{*}{bida_sparse_array}(x, y)

\method{-}{bida_sparse_array}(x, y)

\method{/}{bida_sparse_array}(x, y)

\method{rowSums}{bida_sparse_array}(x, na.rm = FALSE, dims = 1L)

\method{colSums}{bida_sparse_array}(x, na.rm = FALSE, dims = 1L)

as.bida_sparse_array(x, default = 0, ...)
}
\arguments{
\item{index}{(integer vector) position of non-zero elements}

\item{x}{(numeric vector) values of non-zero elements}

\item{dims}{(integer vector) dimension of array}
}
\value{
an object of class \code{bida_sparse_array}
}
\description{
Sparse representation of multi-dimensional arrays.
}
\examples{

vals <- seq(3, 27, by = 3)
x <- new_bida_sparse_array(vals, vals-1, c(3, 3, 3))
x
arr <- as.array(x)

# addition
x+1
y <- new_bida_sparse_array(0:2, 0:2, c(3, 3, 3), default = 1)
x+y
stopifnot(all(as.array(x+y) == as.array(x) + as.array(y)))

colSums(x)
# rep
dims <- 2:4
x <- new_bida_sparse_array(rep(1, prod(dims)), seq_len(prod(dims))-1, dims)
y <- aperm(x, c(3:1))
stopifnot(all.equal(as.array(y), aperm(as.array(x), c(3:1))))


# compare size of sparse and non-sparse arrays
obj_size <- matrix(NA, 24, 2)
sparsity <- .25 # share of non-zero elements
for (i in seq_len(nrow(obj_size))) {
  dims <- rep(2, i)
  index  <- sample(prod(dims), round(prod(dims)*sparsity))
  counts <- sample(100, size = length(index), replace = T)

  sparse <- new_bida_sparse_array(counts, index, dims)
  arr    <- as.array(sparse)
  obj_size[i, 1] <- pryr::object_size(sparse)
  obj_size[i, 2] <- pryr::object_size(arr)
}

matplot(2**seq_len(nrow(obj_size)), obj_size, type = "l")
plot(2**seq_len(nrow(obj_size)), obj_size[, 1]/obj_size[, 2], type = "l")

}
\keyword{internal}
