% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/define_scoreparameters.R
\name{define_scoreparameters}
\alias{define_scoreparameters}
\title{User defined scoreparameters for \code{BiDAG}}
\usage{
define_scoreparameters(data, scoretype, par = NULL, lookup = NULL)
}
\arguments{
\item{data}{(matrix)
each column is assumed to be outcomes of a categorical variable, with
possible outcomes \verb{0, ..., K-1.}}

\item{scoretype}{parameters controlling the local-structure-optimization routine. See \code{\link[=optimize_partition]{optimize_partition()}}.}

\item{lookup}{(environment)
an environment in which the optimized structures are saved, initiated by rlang:::new_environment().
If \code{NULL} the structures are not  saved.}

\item{`par`}{For categorical data, the list of parameters \code{par} have to include:
\itemize{
\item \code{ess}: equivalent sample size
\item \code{edgepf}: a factor \code{-log(edgepf)*length(parentnodes)} is added to the marginal likelihood score.
\item \code{nlev}: a vector with the cardinalities of all variables.
}}
}
\value{
an object of class \link[BiDAG:scoreparameters]{BiDAG::scoreparameters}
}
\description{
Define a \link[BiDAG:scoreparameters]{BiDAG::scoreparameters} object with a user defined score for learning
DAGs with local structure.
}
\examples{

lookup <- rlang:::new_environment() # environment for storing scores and CPTs
bn  <- readRDS("./data/asia.rds")
nlev <- sapply(bn, function(x) dim(x$prob)[1])
data <- sample_data_from_bn(bn, 10)

par <- list(nlev = nlev, ess = 1, edgepf = 2, regular = T)

j <- 8
parentnodes <- 5:6

# no partitioning - use BiDAG-score
scorepar <- define_scoreparameters(data, "bdecat", par, lookup = lookup)
score <- BiDAG:::DAGcorescore(j, parentnodes, ncol(data), scorepar)
score

# user-specified function is assigned to BiDAG-namespace
par$local_struct = "tree"
scorepar <- define_scoreparameters(data, "bdecat", par, lookup = lookup)
BiDAG:::usrDAGcorescore

# computes score with a call to BiDAG:::usrDAGcorescore
score <- BiDAG:::DAGcorescore(j, parentnodes, ncol(data), scorepar)
score

# user-specified functions writes to lookup table
ls.str(lookup)    # updated
lookup$tree[["8.5.6"]]

}
