% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{find_nearest_adjset}
\alias{find_nearest_adjset}
\alias{find_nodes_reachable_via_ancestors}
\title{Identify valid adjustment sets}
\usage{
find_nodes_reachable_via_ancestors(G, dmat, X, A, Z = 0L)

find_nearest_adjset(G, dmat, X, A, Z)
}
\arguments{
\item{G}{a n-by-n adjacency matrix of a backdoor graph. \code{G[i, j] = 1} if there is a path from node i to node j, zero otherwise.}

\item{dmat}{a  n-by-n adjacency matrix of ancestor relations.
If  \code{dmat[i, j] = 1} \verb{i' is an ancestor of }j' in the original graph.
Used to check if traversed nodes are ancestors of \code{Z} looking for v-structures.}

\item{X}{(integer)
column position of source variable (using C++ indexing, from 0 to n-1)}

\item{A}{(logical vector)
indicates the set of nodes trails must be in.
The search along a path ends if visiting a node i such that \code{A[i] = FALSE}.}

\item{Z}{(integer vector)
column positions of conditioning variables (using C++ indexing, from 0 to n-1)}
}
\value{
\itemize{
\item \code{find_nodes_reachable_via_ancestor} implements Algorithm 3.1 in Koller (2009, p. 75)
for finding nodes reachable from \code{X} given \code{Z} via active trails in `G, with the restriction
that only trails where all nodes are in A is considered. On such paths there
can not be any colliders, so this implementation includes no check for colliders
in Z.
\item \code{find_nearest_adjset} return the subset of Z that is reachable from X.
}
}
\description{
Given the set of ancestors A of X and Y and a valid adjustment set
\eqn{Z \subseteq A \setminus Desc(X)}, find the subset of Z nearest X (or Y)
that is valid for adjustment.
}
\details{
Based on Zander and Li≈õkiewicz (2020), with a modified Algorithm 3.1 in Koller (2009, p. 75)
for finding reachable nodes.
Can be used to find:
\itemize{
\item O-set: the subset closest to Y.
\item Parent sets: the subset closets to X.
\item Minimal o-set: the subset of the O-set closest to Y,
i.e. the subset of nodes that can be reached from both X and Y.
\item Minimal parent set: the subset of parents of X closets to Y,
i.e. the subset of parents that can be reached from both X and Y.
}
}
\examples{
# specify DAG by children/row-wise:
dag <- rbind(L = c(0, 1, 0, 1, 0),
             Z = c(0, 0, 1, 0, 0),
             X = c(0, 0, 0, 1, 1),
             Y = c(0, 0, 0, 0, 1),
             C = c(0, 0, 0, 0, 0))
colnames(dag) <- rownames(dag)
g <- as(dag, "graphNEL")
Rgraphviz::plot(g)


n <- ncol(dag)
dmat <- bida::descendants(dag)

X <- 3
Y <- 4

# nodes reachable from X via all active paths
reachable <- find_nodes_reachable_via_ancestors(dag, dmat, X-1, A = rep(TRUE, n), Z = 0L)
colnames(dag)[reachable]


# nodes reachable from X via active ancestor paths
A <- dmat[, X] == 1 | dmat[, Y] == 1
reachable <- find_nodes_reachable_via_ancestors(dag, dmat, X-1, A, Z = 0L)
colnames(dag)[reachable]

# find adjustment sets w.r.t. X and Y
G <- dag
G[X, ] <- 0                         # backdoor graph
Z0 <- which(A & dmat[X, ] == 0)     # ancestor excluding descendants
pa <- find_nearest_adjset(G, dmat, X-1, A, Z0-1) +1
o  <-  find_nearest_adjset(G, dmat, Y-1, A, Z0-1) +1

}
