% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rand_partition.R
\name{rand_partition}
\alias{rand_partition}
\title{Draw a random partition of an outcome space}
\usage{
rand_partition(nlev, prob, method = "tree", regular = FALSE, ...)
}
\arguments{
\item{nlev}{cardinality of the variables.}

\item{prob}{parameter controlling the size of the partition.}

\item{method}{name of algorithm.}

\item{regular}{If \code{TRUE}, the partition is forced to be regular. See \link{make_regular}.}
}
\value{
an vector of length \code{prod(nlev)} assigning each joint outcome to a
subset of the partition.
}
\description{
Draw a random partition of the outcome space of a set of categorical variables
}
\examples{

set.seed(007)
nlev <- c(2, 2, 2)
rand_partition(nlev, prob = .5)

set.seed(007)
nlev <- c(2, 2, 2)
rand_partition(nlev, .5, method = "tree")

# force at least one split by manipulating `nextsplitprob` rule
set.seed(007)
nextsplitprob <- function(x) x/2
rand_partition(nlev, 1, "tree", nextsplitprob)

stopifnot(length(unique(rand_partition(nlev, 1, "tree", function(x) 0))) == 2)

# grow tree of given depth
rand_partition(nlev, 1, maxdepth = 2)

# method = "`dgraph" to merge leaves in decision tree
set.seed(007)
rand_partition(nlev, 1, "dgraph", nextsplitprob)

# high cardinality
nlev <- rep(8, 4)
parts <- list(labels = rand_partition(nlev, .5, "labels"),
              tree = rand_partition(nlev, .5, "tree"),
              dgraph = rand_partition(nlev, .5, "dgraph"))
lapply(parts, function(x) length(unique(x))/length(x))

parts <- rand_partition(nlev, .5, "dgraph")
P <- split(seq_along(parts), parts)
is_regular(P, nlev)

}
