% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_dags.R
\name{sample_dags}
\alias{sample_dags}
\alias{init_search_space}
\title{Sample DAGs with local structure}
\usage{
sample_dags(
  scorepar,
  algo_init = "pcskel",
  algo_sample = "order",
  hardlimit = 5,
  verbose = F
)

init_search_space(
  scorepar,
  algo,
  hardlimit,
  maxp = hardlimit,
  alpha = 0.05,
  verbose
)
}
\arguments{
\item{scorepar}{(object of class \link[BiDAG:scoreparameters]{BiDAG::scoreparameters})
See \link{define_scorepar}.}

\item{algo_init}{(character)
Name of optimization routine for locastructure.}

\item{algo_sample}{(character)
Name of MCMC implementation. Either \code{partition} or \code{order}.
See \link[BiDAG:sampleBN]{BiDAG::sampleBN}.}

\item{hardlimit}{(integer)
Maximanumber of parents allowed. See \link[BiDAG:learnBN]{BiDAG::learnBN}.}

\item{verbose}{(logical)}

\item{maxp}{(integer)
Maximanumber of parents in CPDAG learned by \link[bnlearn:hc]{bnlearn::hc}.
Ignored if not \code{algo=="hc"} or \code{algo == "hcskel"}.}

\item{alpha}{(numeric)
Significance levefor the conditionaindependencies test in \link[pcalg:pc]{pcalg::pc}.
Ignored if not \code{algo=="pc"} or \code{algo == "pcskel"}.}
}
\value{
a
}
\description{
This function is a wrapper around \link[BiDAG:sampleBN]{BiDAG::sampleBN}, and can be used to sample
DAGs with local structure using the different MCMC schemes implemented in \link[BiDAG:sampleBN]{BiDAG::sampleBN}.
The wrapper function allows for different structure learning algorithms to initiate
a search space for the MCMC chain, and forces the maximal parent set size
(\code{hardlimit}) to be  respected by re-running the chosen structure learning procedure
with stricter add-edge-policies until the criteria is met. If the criteria is
not satisfied either under the strictest add-edge-policy, then edges are removed
at random until the criteria is met.
}
\details{
The \code{init_search_space} function is a wrapper around structural learning routines
(\link[bnlearn:hc]{bnlearn::hc} and \link[pcalg:pc]{pcalg::pc}), intended to learn a start-space for the
\link[BiDAG:iterativeMCMC]{BiDAG::iterativeMCMC} procedure.
It forces the maximal number of parents (\code{hardlimit}) to be respected,
by re-running the structure learning procedure with stricter add-edge-policies
(\code{maxp} and \code{alpha}, respectively) until a structure that satifies the \code{hardlimit}
criteria is inferred.
Simply running \code{\link[BiDAG:iterativeMCMC]{BiDAG::iterativeMCMC()}} will run an error message if no skeleton
that satisfies the \code{hardlimit} constraint can be found.
}
\examples{

nlev <- 2:4
data <- sapply(nlev, sample, size = 100, replace = T) -1
colnames(data) <- paste0("X", seq_along(nlev))

scorepar <- define_scoreparameters(data, "bdecat", par = list(chi  = 1, edgepf = 2))
smpl <- sample_dags(scorepar, "pcskel", "order", verbose = T)
attributes(smpl)
smpl
}
