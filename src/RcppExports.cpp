// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// combine_char_vectors_c
CharacterVector combine_char_vectors_c(CharacterVector x, CharacterVector y);
RcppExport SEXP _bida_combine_char_vectors_c(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(combine_char_vectors_c(x, y));
    return rcpp_result_gen;
END_RCPP
}
// named_array_c
NumericVector named_array_c(NumericVector values, NumericVector dim, CharacterVector names);
RcppExport SEXP _bida_named_array_c(SEXP valuesSEXP, SEXP dimSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(named_array_c(values, dim, names));
    return rcpp_result_gen;
END_RCPP
}
// scope_c
CharacterVector scope_c(NumericVector x);
RcppExport SEXP _bida_scope_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scope_c(x));
    return rcpp_result_gen;
END_RCPP
}
// stride_c
NumericVector stride_c(NumericVector x);
RcppExport SEXP _bida_stride_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stride_c(x));
    return rcpp_result_gen;
END_RCPP
}
// factor_product_c
NumericVector factor_product_c(NumericVector x, NumericVector y);
RcppExport SEXP _bida_factor_product_c(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(factor_product_c(x, y));
    return rcpp_result_gen;
END_RCPP
}
// factors_product_c
NumericVector factors_product_c(List factors);
RcppExport SEXP _bida_factors_product_c(SEXP factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type factors(factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(factors_product_c(factors));
    return rcpp_result_gen;
END_RCPP
}
// find_nodes_reachable_via_ancestors
LogicalVector find_nodes_reachable_via_ancestors(IntegerMatrix G, IntegerMatrix dmat, int X, LogicalVector A, IntegerVector Z);
RcppExport SEXP _bida_find_nodes_reachable_via_ancestors(SEXP GSEXP, SEXP dmatSEXP, SEXP XSEXP, SEXP ASEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type X(XSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(find_nodes_reachable_via_ancestors(G, dmat, X, A, Z));
    return rcpp_result_gen;
END_RCPP
}
// find_nearest_adjset
IntegerVector find_nearest_adjset(IntegerMatrix G, IntegerMatrix dmat, int X, LogicalVector A, IntegerVector Z);
RcppExport SEXP _bida_find_nearest_adjset(SEXP GSEXP, SEXP dmatSEXP, SEXP XSEXP, SEXP ASEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type X(XSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(find_nearest_adjset(G, dmat, X, A, Z));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bida_combine_char_vectors_c", (DL_FUNC) &_bida_combine_char_vectors_c, 2},
    {"_bida_named_array_c", (DL_FUNC) &_bida_named_array_c, 3},
    {"_bida_scope_c", (DL_FUNC) &_bida_scope_c, 1},
    {"_bida_stride_c", (DL_FUNC) &_bida_stride_c, 1},
    {"_bida_factor_product_c", (DL_FUNC) &_bida_factor_product_c, 2},
    {"_bida_factors_product_c", (DL_FUNC) &_bida_factors_product_c, 1},
    {"_bida_find_nodes_reachable_via_ancestors", (DL_FUNC) &_bida_find_nodes_reachable_via_ancestors, 5},
    {"_bida_find_nearest_adjset", (DL_FUNC) &_bida_find_nearest_adjset, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bida(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
